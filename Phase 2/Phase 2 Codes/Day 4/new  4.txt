
#include "stdafx.h"
#include <iostream>
#include "opencv2/core/core.hpp"
#include "opencv2/highgui/highgui.hpp"
#include <stdio.h>
using namespace cv;
using namespace std;
#include <opencv2/imgproc/imgproc.hpp>
#include <queue>

int temp = 0;
int **mark;
Mat img2;
void blob(Mat in, int i, int j)
{
	temp++;
	queue<Point> q;
	Point p;
	p.x = j;
	p.y = i;
	q.push(p);
	mark[i][j] = 0;
	while (!q.empty())
	{
		p = q.front();
		q.pop();
		mark[p.y][p.x] = temp;
		

		for (int k = p.y - 1; k < p.y + 2; k++)
		{
			for (int l = p.x - 1; l < p.x + 2; l++)
			{

				if ((in.at<uchar>(k, l) == 0) && (mark[k][l] == -1))
				{
					mark[k][l] = temp;
					p.x = l;
					p.y = k;
					q.push(p);
					
				}
			}
		}
	}



}



void traversal(Mat in)
{
	

	// dynamically allocate an array
	mark = new int *[in.rows];
	for (int count = 0; count < in.rows; count++)
	{
		mark[count] = new int[in.cols];
	}
	

	
	 for (int i = 0; i < in.rows; i++)
	 {
		 for (int j = 0; j < in.cols; j++)
		 {
			 mark[i][j] = -1;
		 }
	 }

	for (int i = 1; i < in.rows-1; i++)
	{
		for (int j = 1; j < in.cols-1; j++)
		{
			if ((in.at<uchar>(i, j) == 0)&&(mark[i][j]==-1))
				blob(in, i, j);
		}
	}

}




int main()
{
	Mat img1;
	img1 = imread("C:/obj0.jpg", 0);
	Mat img2(img1.size(),CV_8UC1);
	traversal(img1);

	for (int i = 0; i < img1.rows; i++)
	{
	for (int j = 0; j < img1.cols; j++)
		{
		if (mark[i][j] == -1)
			img2.at<uchar>(i, j) = 0;
		else if (mark[i][j] != 0)
			img2.at<uchar>(i, j) = 255 / (mark[i][j]);
		else
			img2.at<uchar>(i, j) = 0;
		}
	}
	namedWindow("wind", WINDOW_NORMAL);
	imshow("wind", img2);
	
	for (int i = 0; i < img1.rows; i++)
	{
		cout <<  endl;
		for (int j = 0; j < img1.cols; j++)
		{
			cout << mark[i][j] << ",";
		}
	}
	waitKey(0);

	return 0;
}











